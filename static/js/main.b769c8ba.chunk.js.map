{"version":3,"sources":["DataBucket.ts","DataClient.ts","queries.ts","segments.ts","timeUtils.ts","workhours.ts","metrics.ts","components/ReviewList.tsx","components/PullRequestList.tsx","components/DayList.tsx","components/Dashboard.tsx","components/RepoSelector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataBucket","_createClass","parent","_classCallCheck","this","root","repositories","pullRequests","reviewRequests","reviews","undefined","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","query","queryString","parse","location","search","repos","repo","Array","repoFilter","map","concat","join","cached","implementation","_asyncToGenerator","_callee","cacheKey","_args","arguments","_context","localStorage","getItem","JSON","console","log","apply","setItem","stringify","DataClient","_DataBucket","_inherits","_super","_createSuper","_this","token","needsReposSelected","userOrgs","_callee2","formatOrg","_context2","org","login","id","queryAllPages","items","possibleRepositories","_ref3","_callee3","formatRepo","_context3","fullName","full_name","_x","discoverRepositories","_ref4","_callee4","setProgress","_repos","_context4","_ref5","r","alert","_x2","discoverPullRequests","_ref6","_callee5","mergedPrs","openPrs","pullRequestsData","_iterator","_step","_loop","_context6","moment","subtract","format","t0","t1","_toConsumableArray","q","t2","t3","t4","t5","t6","_createForOfIteratorHelper","pr","repoFullName","commits","_context5","repository_url","replace","labels","find","_ref7","number","opener","user","commit","date","committer","mergedAt","pull_request","merged_at","createdAt","created_at","title","repoId","message","s","n","t7","t8","e","f","_x3","discoverReviewRequests","_ref8","_callee6","results","_iterator2","_step2","_loop2","_context8","_context7","activities","filter","activity","event","requested_reviewer","prTitle","prId","requestedReviewer","requestedAt","_x4","discoverReviews","_ref9","_callee7","_iterator3","_step3","_loop3","_context10","_context9","review","reviewer","reviewedAt","submitted_at","_x5","_load","_callee8","_context11","_x6","_queryAllPages","_callee9","path","params","per_page","page","newPages","response","_args12","_context12","_objectSpread","String","_x7","url","URL","searchParams","append","fetch","toString","headers","Authorization","json","reviewRequestForReview","data","targetReview","previousReview","isBefore","sort","unix","request","isAfter","reviewAfterRework","subjectReview","mergedPullRequestOpeners","uniq","_ref","_ref2","reviewersReviewed","requested","reviewers","intersection","commitsOnDay","day","flatMap","isSame","inProgressPrsOnDay","isBetween","startOf","endOf","forRequestedReviewsReviewedBy","targetReviewer","forRequestedReviewsRequestedBetween","start","end","indexOf","forPullRequestsOpenedBy","targetOpener","_ref10","_ref11","_ref12","_ref13","_ref14","forMergedPullRequestsOpenedBy","_ref15","_ref16","_ref17","_ref18","_ref19","forPullRequestsOpenedBetween","_ref20","_ref21","_ref22","_ref23","_ref24","forPullRequestsMergedBetween","_ref25","_ref26","_ref27","_ref28","_ref29","formatHours","hours","numMinutes","asMinutes","toLocaleString","extendMoment","baseMoment","workHours","hour","minute","second","workhours","range","total","_i","_Array$from","from","clone","snapTo","by","_workHours$day$day","startMoment","set","endMoment","rangeStart","max","rangeEnd","min","diff","duration","timeToReviewRequest","timeToReview","timeToReworkAfterReview","nextReview","reviewRequestAfterRework","ReviewList","segment","onDone","React","createElement","Fragment","Table","TableHead","TableRow","TableCell","TableBody","Button","onClick","PullRequestList","props","setView","useSetView","prSegment","_ref34","_ref35","_ref36","_ref37","forPullRequest","Link","component","href","LaunchIcon","fontSize","timeToMerge","asMilliseconds","timeToMergePullRequest","dataPoints","dataPoint","sum","totalTimeToReviewRequests","_step4","_iterator4","totalTimeToReworkAfterReviews","DayList","daySegment","_ref30","_ref31","_ref32","_ref33","forPullRequestsWithWorkOn","SetDetailContext","createContext","useContext","CellLink","preventDefault","detail","text","DateBucketRow","rowHeader","detailProps","assign","DateBucketTable","_React$useState","useState","_React$useState2","_slicedToArray","setDetail","Provider","dateFilter","rows","row","rowFilter","Dashboard","classes","useStyles","Paper","className","main","Typography","variant","gutterBottom","mean","timeToReviewRequests","timeToReworkAfterReviews","_step5","_iterator5","timeToMergePullRequests","commitDates","week","weekRange","contains","weeklyPrsMerged","weeklyCodingDaysData","_i2","_Array$from2","codingDaysList","codingDaysCount","_i3","_Array$from3","count","weeklyCodingDays","_i4","_Array$from4","dailyInProgressPrCount","RepoSelector","selected","setSelected","_React$useState3","_React$useState4","orgs","setOrgs","_React$useState5","_React$useState6","setOrg","_React$useState7","_React$useState8","setRepos","_React$useState9","_React$useState10","setSearch","useEffect","Box","noValidate","autoComplete","onSubmit","URLSearchParams","window","delete","repoName","sx","maxWidth","& > :not(style)","m","width","FormControl","fullWidth","InputLabel","Select","label","onChange","target","MenuItem","TextField","FormGroup","FormControlLabel","control","Checkbox","checked","previous","includes","theme","createTheme","_process$env","process","CLIENT_ID","REACT_APP_CLIENT_ID","REDIRECT_URI","REACT_APP_REDIRECT_URI","ACCESS_TOKEN_HOST","REACT_APP_ACCESS_TOKEN_HOST","makeStyles","repoChip","margin","spacing","container","marginTop","padding","App","phase","setState","progress","useRef","loadData","useCallback","current","load","receiveToken","setToken","getAccessToken","code","view","redirect","encodeURIComponent","innerHeight","pageYOffset","document","body","offsetHeight","scrollTo","CssBaseline","Chip","src_App","ThemeProvider","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b769c8ba.chunk.js","sourcesContent":["import { Repository, PullRequest, ReviewRequest, Review } from \"./types\";\n\nexport class DataBucket {\n  public root: DataBucket;\n  public repositories: Repository[] = [];\n  public pullRequests: PullRequest[] = [];\n  public reviewRequests: ReviewRequest[] = [];\n  public reviews: Review[] = [];\n\n  constructor(parent?: DataBucket) {\n    this.root = (parent ? parent.root : undefined) || this;\n  }\n}\n","import queryString from 'query-string';\nimport moment, { Moment } from \"moment\";\nimport { DataBucket } from \"./DataBucket\";\nimport { PullRequest, Repository } from \"./types\";\n\nconst query = queryString.parse(location.search);\n\nconst repos = typeof query.repo === 'string'\n  ? [query.repo]\n  : query.repo instanceof Array\n    ? query.repo\n    : undefined\n;\n\nconst repoFilter = repos instanceof Array\n  ? repos.map(repo => `repo:${repo}`).join(' ')\n  : undefined\n;\n\nconst cached = <A extends any[], R>(key: string, implementation: (...args: A) => Promise<R[]>) => async (...args: A) => {\n  const cacheKey = `cache:${key}${repoFilter ? `?repo=${repoFilter}` : ''}`;\n  const cached = localStorage.getItem(cacheKey);\n  let result: R[];\n\n  if (cached) {\n    result = JSON.parse(cached || '') || [];\n    console.log(`loaded ${key}: ${result.length}`);\n    return result;\n  } else {\n    result = await implementation(...args);\n    localStorage.setItem(cacheKey, JSON.stringify(result));\n    console.log(`discovered ${key}: ${result.length}`);\n  }\n\n  return result;\n};\n\nexport default class DataClient extends DataBucket {\n  private token: string | undefined;\n\n  setToken(token: string) {\n    this.token = token;\n  }\n\n  constructor() {\n    super();\n  }\n\n  async load(setProgress: (progress: string) => void) {\n    this.repositories = await this.discoverRepositories(setProgress);\n    this.pullRequests = await this.discoverPullRequests(setProgress);\n    this.reviewRequests = await this.discoverReviewRequests(setProgress);\n    this.reviews = await this.discoverReviews(setProgress);\n  }\n \n  needsReposSelected = () => !repos || repos.length < 1;\n\n  userOrgs = async () => {\n    const formatOrg = (org: any) => ({\n      name: org.login,\n      id: org.id,\n    });\n\n    return this.queryAllPages(`/user/orgs`).then(items => items.map(formatOrg));\n  };\n  possibleRepositories = async (org: string): Promise<Repository[]> => {\n    const formatRepo = (repo: any) => ({\n      fullName: repo.full_name,\n      id: repo.id,\n    });\n\n    return this.queryAllPages(`/orgs/${org}/repos`).then(items => items.map(formatRepo));\n  };\n    \n  discoverRepositories = cached('repositories', async (setProgress: (progress: string) => void): Promise<Repository[]> => {\n    const formatRepo = (repo: any) => ({\n      fullName: repo.full_name,\n      id: repo.id,\n    });\n\n    if (repoFilter) {\n      setProgress(`querying repositories...`)\n      const repos = await this.query(`/search/repositories?q=${repoFilter}`).then(({items}) => items.map(formatRepo));\n      setProgress(`found repositories: \\n -${repos.map((r: any) => r.fullName).join('\\n -')}`)\n\n      return repos;\n    } else {\n      alert('please specify a `?repo=openstax/rex-web` query param. you can specify the param multiple times to load more than one repo');\n      throw new Error('please don\\'t make me load everything....');\n    }\n  });\n\n  discoverPullRequests = cached('pull-requests', async (setProgress: (progress: string) => void) => {\n    const pullRequests: PullRequest[] = [];\n\n    // \"updated\" is not helpful because we have scripts that re-label very old issues, so select on merged and\n    // then separately all open prs (because i don't think logical or is supported in github search\n    const mergedPrs = `is:pr ${repoFilter} merged:>=${moment().subtract(90, 'days').format('YYYY-MM-DD')}`\n    const openPrs = `is:pr is:open ${repoFilter}`\n      \n    setProgress(`querying prs with\\n  merged prs: ${mergedPrs}\\n  open prs: ${openPrs}\\nloading...`)\n    const pullRequestsData = [\n      ...await this.queryAllPages(`/search/issues`, {q: mergedPrs}),\n      ...await this.queryAllPages(`/search/issues`, {q: openPrs})\n    ];\n\n    for (const pr of pullRequestsData) {\n      try {\n        const repoFullName = pr.repository_url.replace(/.*\\.com\\/repos\\//, '');\n\n        if (pr.labels.find(({name}: any) => name === 'release')) {\n          setProgress(`  skipping pr ${repoFullName}#${pr.number} because its labeled as a release`)\n          continue;\n        }\n          \n        setProgress(`  loading commits for pr ${repoFullName}#${pr.number}...`)\n\n        const commits = await this.queryAllPages(`/repos/${repoFullName}/pulls/${pr.number}/commits`);\n\n        pullRequests.push({\n          opener: pr.user.login as string,\n          commits: commits.map(commit => ({\n            date: commit.commit.committer.date as string,\n          })),\n          mergedAt: pr.pull_request.merged_at,\n          createdAt: pr.created_at,\n          title: pr.title,\n          repoFullName,\n          repoId: this.repositories.find(r => r.fullName == repoFullName)!.id,\n          id: pr.number,\n        });\n      } catch (e: any) {\n        console.error(e);\n        setProgress(`[ERROR]: ${e.message}`)\n      }\n    }\n\n    setProgress(`found ${pullRequests.length} pull requests`)\n    return pullRequests;\n  });\n\n  discoverReviewRequests = cached('review-requests', async (setProgress: (progress: string) => void) => {\n    const results = [];\n\n    for (const pr of this.pullRequests) {\n      setProgress(`  loading review requests for pr ${pr.repoFullName}#${pr.id}...`)\n      results.push(\n        ...await this.queryAllPages(`/repos/${pr.repoFullName}/issues/${pr.id}/events`).then(activities => activities\n          .filter((activity: any) => activity.event === 'review_requested' && activity.requested_reviewer)\n          .map((activity: any) => ({\n            repoFullName: pr.repoFullName,\n            prTitle: pr.title,\n            prId: pr.id,\n            requestedReviewer: activity.requested_reviewer.login,\n            requestedAt: activity.created_at,\n          })))\n      );\n    }\n    \n    setProgress(`found ${results.length} review requests`)\n\n    return results;\n  });\n\n  discoverReviews = cached('reviews', async (setProgress: (progress: string) => void) => {\n    const results = [];\n\n    for (const pr of this.pullRequests) {\n      setProgress(`  loading reviews for pr ${pr.repoFullName}#${pr.id}...`)\n      results.push(\n        ...await this.queryAllPages(`/repos/${pr.repoFullName}/pulls/${pr.id}/reviews`).then(reviews => reviews\n          .map((review: any) => ({\n            repoFullName: pr.repoFullName,\n            prId: pr.id,\n            reviewer: review.user.login,\n            reviewedAt: review.submitted_at,\n            state: review.state,\n          })))\n      );\n    }\n    \n    setProgress(`found ${results.length} reviews`)\n\n    return results;\n  });\n\n  private async queryAllPages(path: string, params: {[key: string]: string} = {}) {\n    const results = [];\n    const per_page = 100;\n    let page = 1;\n    let newPages = [];\n\n    do  {\n      const response = await this.query(path, {...params, page: String(page++), per_page: String(per_page)});\n      newPages = 'items' in response ? response.items : response;\n      results.push(...newPages);\n    } while (newPages.length === per_page);\n\n    return results;\n  }\n\n  private query(path: string, params: {[key: string]: string} = {}) {\n    const url = new URL(`https://api.github.com${path}`);\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n\n    return fetch(url.toString(), {\n      headers: {\n        \"Authorization\": `token ${this.token}`\n      }\n    })\n      .then(response => response.json());\n  }\n}\n","import { DataBucket } from \"./DataBucket\";\nimport {mean, intersection, uniq} from 'lodash/fp';\nimport moment, { Moment } from \"moment\";\nimport { Review, ReviewRequest } from \"./types\";\n\nexport const reviewRequestForReview = (data: DataBucket, targetReview: Review): ReviewRequest | undefined => {\n  const previousReview = data.root.reviews\n    .filter(review =>\n      review.prId === targetReview.prId\n      && review.reviewer === targetReview.reviewer\n      && moment(review.reviewedAt).isBefore(targetReview.reviewedAt)\n    )\n    .sort((review: any) => moment(review.reviewedAt).unix())\n    .reverse()\n    [0]\n  ;\n\n  return data.root.reviewRequests\n    .filter(request =>\n      request.prId === targetReview.prId\n      && request.requestedReviewer === targetReview.reviewer\n      && moment(request.requestedAt).isBefore(targetReview.reviewedAt)\n      && (!previousReview || moment(request.requestedAt).isAfter(previousReview.reviewedAt))\n    )\n    .sort((review: any) => moment(review.reviewedAt).unix())\n    .reverse()\n    [0];\n};\n\nexport const reviewRequestAfterRework = (data: DataBucket, subjectReview: Review): ReviewRequest | undefined => {\n  const nextReview = reviewAfterRework(data, subjectReview); \n\n  return data.root.reviewRequests\n    .filter(request =>\n      request.repoFullName === subjectReview.repoFullName\n      && request.prId === subjectReview.prId\n      && request.requestedReviewer === subjectReview.reviewer\n      && moment(request.requestedAt).isAfter(subjectReview.reviewedAt)\n      && (!nextReview || moment(request.requestedAt).isBefore(nextReview.reviewedAt))\n    )\n    .sort((review: any) => moment(review.reviewedAt).unix())\n    [0];\n};\n\nexport const reviewAfterRework = (data: DataBucket, subjectReview: Review): Review | undefined => {\n  return data.root.reviews\n    .filter(review =>\n      review.repoFullName === subjectReview.repoFullName\n      && review.prId === subjectReview.prId\n      && review.reviewer === subjectReview.reviewer\n      && moment(review.reviewedAt).isAfter(subjectReview.reviewedAt)\n    )\n    .sort((review: any) => moment(review.reviewedAt).unix())\n    [0]\n  ;\n};\n\nexport const mergedPullRequestOpeners = (data: DataBucket) =>\n  uniq(data.pullRequests\n    .filter(({mergedAt}) => !!mergedAt)\n    .map(({opener}) => opener)\n  )\n;\n\nexport const reviewersReviewed = (data: DataBucket) => {\n  const requested = data.reviewRequests.map(({requestedReviewer}) => requestedReviewer);\n  const reviewers = data.reviews.map(({reviewer}) => reviewer);\n\n  return uniq(intersection(\n    requested,\n    reviewers\n  ));\n};\n\nexport const commitsOnDay = (data: DataBucket, day: Moment) => {\n  const commitDates = data.pullRequests\n    .flatMap(({commits}) => commits.map(commit => moment(commit.date)))\n\n  return commitDates.filter(date => {\n    return day.isSame(date, 'day')\n  }).length\n}\n\nexport const inProgressPrsOnDay = (data: DataBucket, day: Moment) => {\n  return data.pullRequests.filter(\n    pr => pr.mergedAt\n      ? day.isBetween(moment(pr.commits[0].date).startOf('day'), moment(pr.mergedAt).endOf('day'))\n      : day.isAfter(moment(pr.commits[0].date).startOf('day'))\n  )\n}\n","import {intersection, uniq} from 'lodash/fp';\nimport moment, { Moment } from \"moment\";\nimport { DataBucket } from \"./DataBucket\";\nimport { reviewRequestForReview, inProgressPrsOnDay } from \"./queries\";\nimport { PullRequest } from \"./types\";\n\nexport const forRequestedReviewsReviewedBy = (data: DataBucket, targetReviewer: string): DataBucket => {\n  const result = new DataBucket(data);\n  result.reviewRequests = data.reviewRequests.filter(({requestedReviewer}) => requestedReviewer === targetReviewer);\n  result.reviews = data.reviews.filter(({reviewer}) => reviewer === targetReviewer);\n  result.pullRequests = data.pullRequests.filter((pr) => !!result.reviews.find(\n    ({repoFullName, prId}) => repoFullName === pr.repoFullName && prId === pr.id\n  ));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n\n  return result;\n};\n\nexport const forRequestedReviewsRequestedBetween = (data: DataBucket, start: Moment, end: Moment): DataBucket => {\n  const result = new DataBucket(data);\n\n  result.reviewRequests = data.reviewRequests.filter(({requestedAt}) => moment(requestedAt).isBetween(start, end));\n  result.reviews = data.reviews.filter(review => {\n    const request = reviewRequestForReview(data, review);\n    return request && result.reviewRequests.indexOf(request) > -1\n  });\n  result.pullRequests = data.pullRequests.filter((pr) => !!result.reviews.find(\n    ({repoFullName, prId}) => repoFullName === pr.repoFullName && prId === pr.id\n  ));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n\n  return result;\n};\n\nexport const forPullRequestsOpenedBy = (data: DataBucket, targetOpener: string): DataBucket => {\n  const result = new DataBucket(data);\n\n  result.pullRequests = data.pullRequests.filter(({opener}) => opener === targetOpener);\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n  result.reviewRequests = data.reviewRequests.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n\n  return result;\n};\n\nexport const forMergedPullRequestsOpenedBy = (data: DataBucket, targetOpener: string): DataBucket => {\n  const result = new DataBucket(data);\n\n  result.pullRequests = data.pullRequests.filter(({opener, mergedAt}) => !!mergedAt && opener === targetOpener);\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n  result.reviewRequests = data.reviewRequests.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n\n  return result;\n};\n\nexport const forPullRequestsOpenedBetween = (data: DataBucket, start: Moment, end: Moment): DataBucket => {\n  const result = new DataBucket(data);\n\n  result.pullRequests = data.pullRequests.filter(({createdAt}) => moment(createdAt).isBetween(start, end));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n  result.reviewRequests = data.reviewRequests.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n\n  return result;\n};\n\nexport const forPullRequestsMergedBetween = (data: DataBucket, start: Moment, end: Moment): DataBucket => {\n  const result = new DataBucket(data);\n\n  result.pullRequests = data.pullRequests.filter(({mergedAt}) => mergedAt && moment(mergedAt).isBetween(start, end));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n  result.reviewRequests = data.reviewRequests.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n\n  return result;\n};\n\nexport const forPullRequestsWithWorkOn = (data: DataBucket, day: Moment): DataBucket => {\n  const result = new DataBucket(data);\n\n  result.pullRequests = inProgressPrsOnDay(data, day);\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n  result.reviewRequests = data.reviewRequests.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n\n  return result;\n};\n\nexport const forPullRequest = (data: DataBucket, pr: PullRequest): DataBucket => {\n  const result = new DataBucket(data);\n\n  result.pullRequests = data.pullRequests.filter(f => f === pr);\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n  result.reviewRequests = data.reviewRequests.filter(({prId, repoFullName}) => !!result.pullRequests.find(\n    (pr) => repoFullName === pr.repoFullName && prId === pr.id)\n  );\n\n  return result;\n};\n","import moment from 'moment';\n\nexport const formatHours = (hours: moment.Duration | null) => {\n  if (!hours) return '';\n  const numMinutes = hours.asMinutes();\n  const minutesInADay = 8 * 60\n  return isNaN(numMinutes)\n    ? null\n    : numMinutes >= minutesInADay\n      ? `${(numMinutes/minutesInADay).toLocaleString()} days`\n      : numMinutes > 60\n        ? `${(numMinutes/60).toLocaleString()} hours`\n        : `${numMinutes.toLocaleString()} minutes`;\n};\n","import baseMoment from 'moment';\nimport { extendMoment, DateRange } from 'moment-range';\n\nconst moment = extendMoment(baseMoment as any);\n\nconst workHours = [\n  /* sunday */    {start: {hour: 0, minute: 0, second: 0}, end: {hour: 0, minute: 0, second: 0}},\n  /* monday */    {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* tuesday */   {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* wednesday */ {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* thursday */  {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* friday */    {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* saturday */  {start: {hour: 0, minute: 0, second: 0}, end: {hour: 0, minute: 0, second: 0}},\n];\n\nexport default (range: DateRange): baseMoment.Duration => {\n  let total: number = 0;\n\n  for (const day of Array.from(range.clone().snapTo('day').by('day'))) {\n    const {start, end} = workHours[day.day()];\n    const startMoment = day.clone().set(start);\n    const endMoment = day.clone().set(end);\n\n    const rangeStart = moment.max(startMoment, range.start);\n    const rangeEnd = moment.min(endMoment, range.end);\n\n    // this will be false if there are no work hours on that day\n    // or if the range start is after hours or the range end is before hours\n    if (rangeStart < rangeEnd) {\n      total += rangeEnd.diff(rangeStart);\n    }\n  }\n\n  return moment.duration(total);\n};\n","import {mean, sum} from 'lodash/fp';\nimport { DataBucket } from \"./DataBucket\";\nimport workHours from './workhours';\nimport 'moment-range';\nimport { extendMoment } from 'moment-range';\nimport baseMoment, {Moment} from 'moment';\nimport { PullRequest, Review } from \"./types\";\nimport { reviewRequestForReview, reviewRequestAfterRework, reviewAfterRework, commitsOnDay, inProgressPrsOnDay } from \"./queries\";\n\nconst moment = extendMoment(baseMoment as any);\n\nexport const timeToReviewRequest = (data: DataBucket, review: Review) => {\n  const request = reviewRequestForReview(data, review);\n  \n  if (request) {\n    const timeToReview = moment.range(moment(request.requestedAt), moment(review.reviewedAt));\n    return workHours(timeToReview);\n  }\n\n  return null;\n};\n\nexport const timeToReviewRequests = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const review of data.reviews) {\n    const dataPoint = timeToReviewRequest(data, review);\n\n    if (dataPoint) {\n      dataPoints.push(dataPoint.asMilliseconds());\n    }\n  }\n\n  return moment.duration(mean(dataPoints));\n};\n\nexport const totalTimeToReviewRequests = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const review of data.reviews) {\n    const dataPoint = timeToReviewRequest(data, review);\n\n    if (dataPoint) {\n      dataPoints.push(dataPoint.asMilliseconds());\n    }\n  }\n\n  return moment.duration(sum(dataPoints));\n};\n\nexport const timeToReworkAfterReview = (data: DataBucket, review: Review) => {\n  const pr = data.pullRequests.find(\n    (pr) => review.repoFullName === pr.repoFullName && review.prId === pr.id\n  );\n\n  if (!pr || pr.opener === review.reviewer) {\n    return null;\n  }\n\n  const request = reviewRequestAfterRework(data, review);\n  const nextReview = reviewAfterRework(data, review);\n    \n  if (nextReview) {\n    const timeToReview = moment.range(moment(review.reviewedAt), moment(nextReview.reviewedAt));\n    return workHours(timeToReview);\n  } else if (request) {\n    const timeToReview = moment.range(moment(review.reviewedAt), moment(request.requestedAt));\n    return workHours(timeToReview);\n  }\n\n  return null;\n}\n\nexport const timeToReworkAfterReviews = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const review of data.reviews) {\n    const dataPoint = timeToReworkAfterReview(data, review);\n\n    if (dataPoint) {\n      dataPoints.push(dataPoint.asMilliseconds());\n    }\n  }\n\n  return moment.duration(mean(dataPoints));\n};\n\nexport const totalTimeToReworkAfterReviews = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const review of data.reviews) {\n    const dataPoint = timeToReworkAfterReview(data, review);\n\n    if (dataPoint) {\n      dataPoints.push(dataPoint.asMilliseconds());\n    }\n  }\n\n  return moment.duration(sum(dataPoints));\n};\n\nexport const timeToMergePullRequest = (pr: PullRequest) => {\n  const timeToMerge = moment.range(moment(pr.commits[0].date), moment(pr.mergedAt));\n  return moment.duration(workHours(timeToMerge).asMilliseconds());\n};\n\nexport const timeToMergePullRequests = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const pullRequests of data.pullRequests) {\n    if (!pullRequests.mergedAt) {\n      continue;\n    }\n    const timeToMerge = moment.range(moment(pullRequests.commits[0].date), moment(pullRequests.mergedAt));\n    dataPoints.push(workHours(timeToMerge).asMilliseconds());\n  }\n\n  return moment.duration(mean(dataPoints));\n};\n\nexport const weeklyPrsMerged = (data: DataBucket, start?: Moment, end?: Moment) => {\n\n  const commitDates = data.pullRequests\n    .flatMap(({commits}) => commits.map(commit => moment(commit.date)))\n\n  const range = moment.range(start || moment.min(commitDates), end || moment.max(commitDates));\n\n  const dataPoints = [];\n\n  for (const week of Array.from(range.by('week'))) {\n    const weekRange = moment.range(week.clone().startOf('week'), week.clone().endOf('week'));\n    dataPoints.push(data.pullRequests.filter(pr => pr.mergedAt && weekRange.contains(moment(pr.mergedAt))).length)\n  }\n\n  \n  return mean(dataPoints);\n}\n\nexport const weeklyCodingDays = (data: DataBucket, start?: Moment, end?: Moment) => {\n\n  const commitDates = data.pullRequests\n    .flatMap(({commits}) => commits.map(commit => moment(commit.date)))\n\n  const range = moment.range(start || moment.min(commitDates), end || moment.max(commitDates));\n\n  const weeklyCodingDaysData = [];\n\n  for (const week of Array.from(range.by('week'))) {\n    const codingDaysList = [];\n    let codingDaysCount = 0;\n\n    for (const day of Array.from(moment.range(week.clone().startOf('week'), week.clone().endOf('week')).by('day'))) {\n      const count = commitsOnDay(data, day) \n\n      if (count > 0) {\n        codingDaysList.push({day, count})\n        codingDaysCount++;\n      }\n    }\n\n    weeklyCodingDaysData.push(codingDaysCount);\n  }\n\n  \n  return mean(weeklyCodingDaysData);\n}\n\nexport const dailyInProgressPrCount = (data: DataBucket, start?: Moment, end?: Moment) => {\n\n  const commitDates = data.pullRequests\n    .flatMap(({commits}) => commits.map(commit => moment(commit.date)))\n\n  const range = moment.range(start || moment.min(commitDates), end || moment.max(commitDates));\n\n  const dataPoints = [];\n\n  for (const day of Array.from(range.by('day'))) {\n    dataPoints.push(inProgressPrsOnDay(data, day).length)\n  }\n  \n  return mean(dataPoints);\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DataBucket } from \"../DataBucket\";\nimport { timeToReviewRequest, timeToReworkAfterReview } from \"../metrics\";\nimport { formatHours } from \"../timeUtils\";\n\ntype Props = {\n  segment: DataBucket;\n  onDone: () => void;\n};\n\nconst ReviewList = ({segment, onDone}: Props) => {\n  return <>\n      <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>created</TableCell>\n          <TableCell>reviewer</TableCell>\n          <TableCell>lead time</TableCell>\n          <TableCell>rework time</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {segment.reviews.map(review => {\n          return <TableRow key={`${review.prId} ${review.reviewedAt}`}>\n            <TableCell>{review.reviewedAt}</TableCell>\n            <TableCell>{review.reviewer}</TableCell>\n            <TableCell>{formatHours(timeToReviewRequest(segment, review))}</TableCell>\n            <TableCell>{formatHours(timeToReworkAfterReview(segment, review))}</TableCell>\n          </TableRow>\n        })}\n      </TableBody>\n    </Table>\n    {onDone ? <Button onClick={onDone}>back</Button> : null}\n  </>\n};\n\nexport default ReviewList;\n","import React from 'react';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DataBucket } from \"../DataBucket\";\nimport { timeToMergePullRequest, totalTimeToReworkAfterReviews, totalTimeToReviewRequests } from \"../metrics\";\nimport { formatHours } from \"../timeUtils\";\nimport Button from '@material-ui/core/Button';\nimport ReviewList from './ReviewList';\nimport { forPullRequest } from \"../segments\";\nimport { useSetView } from \"./Dashboard\";\n\ntype Props = {\n  segment: DataBucket;\n  onDone: () => void;\n};\n\nexport const PullRequestList = (props: Props) => {\n  const {segment, onDone} = props;\n  const setView = useSetView();\n\n  return <>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>title</TableCell>\n          <TableCell>time to merge</TableCell>\n          <TableCell>total time waiting for review</TableCell>\n          <TableCell>total rework time</TableCell>\n          <TableCell>created</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {segment.pullRequests.map(pr => {\n          const prSegment = forPullRequest(segment, pr);\n\n          return <TableRow key={`${pr.repoId} ${pr.id}`}>\n            <TableCell>\n              <Link component='button' onClick={(e: any) => { \n                setView({component: ReviewList, props: {\n                  segment: prSegment,\n                  onDone: () => setView({component: PullRequestList, props})}\n                }); \n              }}>{pr.title}</Link>\n              <Link href={`https://github.com/${pr.repoFullName}/pull/${pr.id}`}><LaunchIcon fontSize='small' /></Link>\n            </TableCell>\n            <TableCell>{formatHours(timeToMergePullRequest(pr))}</TableCell>\n            <TableCell>{formatHours(totalTimeToReviewRequests(prSegment))}</TableCell>\n            <TableCell>{formatHours(totalTimeToReworkAfterReviews(prSegment))}</TableCell>\n            <TableCell>{pr.createdAt}</TableCell>\n          </TableRow>\n        })}\n      </TableBody>\n    </Table>\n    {onDone ? <Button onClick={onDone}>back</Button> : null}\n  </>\n};\n\nexport default PullRequestList;\n","import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DataBucket } from \"../DataBucket\";\nimport Button from '@material-ui/core/Button';\nimport { useSetView } from \"./Dashboard\";\nimport 'moment-range';\nimport { extendMoment } from 'moment-range';\nimport baseMoment, {Moment} from 'moment';\nimport { commitsOnDay, inProgressPrsOnDay } from \"../queries\";\nimport { forPullRequestsWithWorkOn } from \"../segments\";\nimport { PullRequestList } from \"./PullRequestList\";\n\nconst moment = extendMoment(baseMoment as any);\n\ntype Props = {\n  segment: DataBucket;\n  start: Moment;\n  end: Moment;\n  onDone: () => void;\n};\n\nexport const DayList = (props: Props) => {\n  const {segment, onDone} = props;\n  const setView = useSetView();\n\n  return <>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>date</TableCell>\n          <TableCell>commits</TableCell>\n          <TableCell>prs</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {Array.from(moment.range(props.start, props.end).by('day')).map(day => {\n          const daySegment = forPullRequestsWithWorkOn(segment, day);\n          return <TableRow key={`${day.format()}`}>\n            <TableCell>\n              <Link component='button' onClick={(e: any) => { \n                setView({component: PullRequestList, props: {\n                  segment: daySegment,\n                  onDone: () => setView({component: DayList, props})}\n                }); \n              }}>{day.format('dddd, MMM, Do, YY')}</Link>\n            </TableCell>\n            <TableCell>{commitsOnDay(segment, day)}</TableCell>\n            <TableCell>{inProgressPrsOnDay(segment, day).length}</TableCell>\n          </TableRow>\n        })}\n      </TableBody>\n    </Table>\n    {onDone ? <Button onClick={onDone}>back</Button> : null}\n  </>\n};\n","import Paper from '@material-ui/core/Paper';\nimport moment, {Moment} from 'moment';\nimport Typography from \"@material-ui/core/Typography\";\nimport React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { forMergedPullRequestsOpenedBy, forPullRequestsOpenedBetween, forRequestedReviewsReviewedBy, forRequestedReviewsRequestedBetween, forPullRequestsOpenedBy, forPullRequestsMergedBetween } from \"../segments\";\nimport { formatHours } from \"../timeUtils\";\nimport { DataBucket } from \"../DataBucket\";\nimport { mergedPullRequestOpeners, reviewersReviewed } from \"../queries\";\nimport { timeToMergePullRequests, timeToReviewRequests, timeToReworkAfterReviews, weeklyCodingDays, dailyInProgressPrCount, weeklyPrsMerged } from \"../metrics\";\nimport PullRequestList from './PullRequestList';\nimport { useStyles } from \"../App\";\nimport { DayList } from \"./DayList\";\n\ntype Props = {\n  data: DataBucket;\n};\n\ntype View = undefined | {component: React.ComponentType<any>, props: any}\ntype SetView = (view: View) => void\nexport const SetDetailContext = React.createContext<SetView>(() => { throw new Error('not implemented') })\nexport const useSetView = () => React.useContext(SetDetailContext);\n\nconst CellLink = (props: {\n  segment: DataBucket;\n  detail: React.ComponentType<any>;\n  text: (segment: DataBucket) => string | null; \n}) => {\n  const setView = useSetView();\n\n  return <TableCell>\n    <Link component='button' onClick={(e: any) => { \n      e.preventDefault();\n      setView({component: props.detail, props: {segment: props.segment, onDone: () => setView(undefined)}}); \n    }}>{props.text(props.segment) || '-'}</Link>\n  </TableCell>\n};\n\nconst DateBucketRow = (props: {\n  rowHeader: string;\n  segment: DataBucket;\n  detail: React.ComponentType<any>;\n  filter: (segment: DataBucket, start: Moment, end: Moment) => DataBucket;\n  text: (segment: DataBucket, start?: Moment, end?: Moment) => string | null; \n}) => { \n  return <TableRow>\n    <CellLink\n      segment={props.segment}\n      detail={props.detail}\n      text={() => props.rowHeader}\n    />\n    <CellLink\n      segment={props.filter(props.segment, moment().subtract(30, 'days'), moment())}\n      detail={detailProps => <props.detail {...detailProps} start={moment().subtract(30, 'days')} end={moment()} />}\n      text={(data) => props.text(data, moment().subtract(30, 'days'), moment())}\n    />\n    <CellLink\n      segment={props.filter(props.segment, moment().subtract(60, 'days'), moment().subtract(30, 'days'))}\n      detail={detailProps => <props.detail {...detailProps} start={moment().subtract(60, 'days')} end={moment().subtract(30, 'days')} />}\n      text={(data) => props.text(data, moment().subtract(60, 'days'), moment().subtract(30, 'days'))}\n    />\n    <CellLink\n      segment={props.filter(props.segment, moment().subtract(90, 'days'), moment().subtract(60, 'days'))}\n      detail={detailProps => <props.detail {...detailProps} start={moment().subtract(90, 'days')} end={moment().subtract(60, 'days')} />}\n      text={(data) => props.text(data, moment().subtract(90, 'days'), moment().subtract(60, 'days'))}\n    />\n  </TableRow>;\n}\n      \nconst DateBucketTable = (props: {\n  rows: (segment: DataBucket) => string[];\n  segment: DataBucket;\n  detail: React.ComponentType<any>;\n  dateFilter: (segment: DataBucket, start: Moment, end: Moment) => DataBucket;\n  rowFilter: (segment: DataBucket, row: string) => DataBucket;\n  text: (segment: DataBucket, start?: Moment, end?: Moment) => string | null; \n}) => {\n  const [detail, setDetail] = React.useState<View>();\n\n  return <SetDetailContext.Provider value={setDetail}>\n    {detail\n      ? <>\n        <detail.component {...detail.props} />\n      </>\n      : <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>past 30 days</TableCell>\n            <TableCell>30 - 60 days</TableCell>\n            <TableCell>60 - 90 days</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <DateBucketRow\n            rowHeader={''}\n            segment={props.segment}\n            detail={props.detail}\n            filter={props.dateFilter}\n            text={props.text}\n          />\n          {props.rows(props.segment).map(row => \n            <DateBucketRow key={row}\n              rowHeader={row}\n              segment={props.rowFilter(props.segment, row)}\n              detail={props.detail}\n              filter={props.dateFilter}\n              text={props.text}\n            />\n          )}\n        </TableBody>\n      </Table>}\n  </SetDetailContext.Provider>;\n}\n\nconst Dashboard = ({data}: Props) => {\n  const classes = useStyles();\n\n  return <React.Fragment>\n    <Paper className={classes.main}>\n      <Typography variant=\"h3\" gutterBottom>\n        time to respond to review requests\n      </Typography>\n      <Typography variant=\"caption\" gutterBottom>\n        when a review is requested from somebody, how long does it take them to respond?\n        this metric only counts time during work hours monday through friday.\n      </Typography>\n      <DateBucketTable\n        segment={data}\n        detail={PullRequestList}\n        rows={reviewersReviewed}\n        rowFilter={forRequestedReviewsReviewedBy}\n        dateFilter={forRequestedReviewsRequestedBetween}\n        text={segment => formatHours(timeToReviewRequests(segment))}\n      />\n    </Paper>\n    <Paper className={classes.main}>\n      <Typography variant=\"h3\" gutterBottom>\n        time to rework after review\n      </Typography>\n      <Typography variant=\"caption\" gutterBottom>\n        how long does it take the PR owner to re-work and re-request review after receiving feedback? \n        this metric only counts time during work hours monday through friday.\n      </Typography>\n      <DateBucketTable\n        segment={data}\n        detail={PullRequestList}\n        rows={mergedPullRequestOpeners}\n        rowFilter={forMergedPullRequestsOpenedBy}\n        dateFilter={forRequestedReviewsRequestedBetween}\n        text={segment => formatHours(timeToReworkAfterReviews(segment))}\n      />\n    </Paper>\n    <Paper className={classes.main}>\n      <Typography variant=\"h3\" gutterBottom>\n        time to merge pull requests\n      </Typography>\n      <Typography variant=\"caption\" gutterBottom>\n        when somebody opens a pull request, how long is it between the first commit on the pull request and when it is merged?\n        this metric only counts time during work hours monday through friday.\n      </Typography>\n      <DateBucketTable\n        segment={data}\n        detail={PullRequestList}\n        rows={mergedPullRequestOpeners}\n        rowFilter={forMergedPullRequestsOpenedBy}\n        dateFilter={forPullRequestsOpenedBetween}\n        text={segment => formatHours(timeToMergePullRequests(segment))}\n      />\n    </Paper>\n    <Paper className={classes.main}>\n      <Typography variant=\"h3\" gutterBottom>\n        weekly pull requests merged \n      </Typography>\n      <Typography variant=\"caption\" gutterBottom>\n        the average number of pull requests merged each week\n      </Typography>\n      <DateBucketTable\n        segment={data}\n        detail={PullRequestList}\n        rows={mergedPullRequestOpeners}\n        rowFilter={forMergedPullRequestsOpenedBy}\n        dateFilter={forPullRequestsMergedBetween}\n        text={(segment, start, end) => weeklyPrsMerged(segment, start, end).toLocaleString()}\n      />\n    </Paper>\n    <Paper className={classes.main}>\n      <Typography variant=\"h3\" gutterBottom>\n        weekly coding days\n      </Typography>\n      <Typography variant=\"caption\" gutterBottom>\n        the average number of days per week that have at least one commit on a pull request\n      </Typography>\n      <DateBucketTable\n        segment={data}\n        detail={DayList}\n        rows={mergedPullRequestOpeners}\n        rowFilter={forPullRequestsOpenedBy}\n        dateFilter={data => data}\n        text={(segment, start, end) => weeklyCodingDays(segment, start, end).toLocaleString()}\n      />\n    </Paper>\n    <Paper className={classes.main}>\n      <Typography variant=\"h3\" gutterBottom>\n        work in progress\n      </Typography>\n      <Typography variant=\"caption\" gutterBottom>\n        the average number of in progress pull requests on any given day\n      </Typography>\n      <DateBucketTable\n        segment={data}\n        detail={DayList}\n        rows={mergedPullRequestOpeners}\n        rowFilter={forPullRequestsOpenedBy}\n        dateFilter={data => data}\n        text={(segment, start, end) => dailyInProgressPrCount(segment, start, end).toLocaleString()}\n      />\n    </Paper>\n  </React.Fragment>\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from \"@material-ui/core/Typography\";\nimport DataClient from \"../DataClient\";\nimport TextField from '@mui/material/TextField';\nimport { Repository } from \"../types\";\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport InputLabel from '@mui/material/InputLabel';\n\nexport const RepoSelector = ({data}: {data: DataClient}) => {\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [orgs, setOrgs] = React.useState<any[]>([]);\n  const [org, setOrg] = React.useState<string>('');\n  const [repos, setRepos] = React.useState<Repository[] | null>(null);\n  const [search, setSearch] = React.useState<string>('');\n\n  React.useEffect(() => {\n    data.userOrgs().then(orgs => {\n      setOrg(orgs[0].name);\n      setOrgs(orgs);\n    });\n  }, []);\n\n  React.useEffect(() => {\n    if (org) {\n      setSearch('');\n      setRepos(null);\n      data.possibleRepositories(org).then(setRepos);\n    }\n  }, [org]);\n\n  return <Box\n    component=\"form\"\n    noValidate\n    autoComplete=\"off\"\n    onSubmit={e => {\n      e.preventDefault();\n      const searchParams = new URLSearchParams(window.location.search);\n      searchParams.delete('repo');\n      selected.forEach(repoName => searchParams.append('repo', repoName));\n      window.location.search = searchParams.toString();\n    }}\n    sx={{\n      maxWidth: '500px',\n      '& > :not(style)': { m: 1, width: '100%' },\n    }}\n  >\n    <FormControl fullWidth>\n      <InputLabel>Organization</InputLabel>\n      <Select\n        label=\"Organization\"\n        value={orgs.find(s => s.name == org) ? org : ''}\n        onChange={e => setOrg(e.target.value as string)}\n      >\n        {orgs.map(org => <MenuItem key={org.name} value={org.name}>{org.name}</MenuItem>)}\n      </Select>\n    </FormControl>\n\n    <TextField label=\"Search\" variant=\"outlined\" value={search} onChange={e => setSearch(e.target.value)} />\n\n    <FormGroup>\n      {selected.map(repoName => \n        <FormControlLabel key={repoName} control={<Checkbox checked={true} onChange={() => setSelected(previous => previous.filter(s => s !== repoName))} />} label={repoName} />\n      )}\n      {selected.length < 1\n        ? <Typography>Select some repos</Typography>\n        : null \n      }\n\n      <Button variant=\"outlined\" type=\"submit\">View Metrics</Button>\n    </FormGroup>\n    <FormGroup>\n      {repos\n        ? repos.filter(repo => repo.fullName.includes(search) && !selected.includes(repo.fullName)).map(repo => \n          <FormControlLabel key={repo.fullName} control={<Checkbox checked={false} onChange={() => setSelected(previous => [...previous, repo.fullName])} />} label={repo.fullName} />\n        )\n        : <Typography>loading repos...</Typography>\n      }\n    </FormGroup>\n\n  </Box>\n};\n","import React from 'react';\nimport DataClient from \"./DataClient\";\nimport queryString from 'query-string';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Theme, ThemeProvider, createTheme, makeStyles } from '@material-ui/core/styles';\nimport Dashboard from './components/Dashboard';\nimport { RepoSelector } from \"./components/RepoSelector\";\n\nconst query = queryString.parse(window.location.search);\n\nconst theme = createTheme();\n\nconst {\n  REACT_APP_CLIENT_ID: CLIENT_ID,\n  REACT_APP_REDIRECT_URI: REDIRECT_URI,\n  REACT_APP_ACCESS_TOKEN_HOST: ACCESS_TOKEN_HOST\n} = process.env;\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  repoChip: {\n    margin: theme.spacing(1/4),\n  },\n  container: {\n    margin: theme.spacing(2),\n  },\n  main: {\n    marginTop: theme.spacing(4),\n    padding: theme.spacing(4),\n  },\n}));\n\ntype State = {\n  token?: string,\n  phase: 'repo-select' | 'loading' | 'loaded' | null,\n  view?: React.ComponentElement<any, any>\n};\nconst App = () => {\n  const [state, setState] = React.useState<State>({phase: null});\n  const [progress, setProgress] = React.useState<string>('');\n  const data = React.useRef(new DataClient());\n  const classes = useStyles();\n\n  const loadData = React.useCallback(() => {\n    setProgress('');\n    data.current.load(\n      progress => setProgress(previous => previous + '\\n' + progress)\n    ).then(() => setState(previous => ({...previous, phase: 'loaded'})));\n  }, [setState]);\n\n  const receiveToken = React.useCallback((token: string) => {\n    localStorage.setItem('token', token);\n    setState(previous => ({...previous, token, phase: data.current.needsReposSelected() ? 'repo-select' : 'loading'}));\n\n    data.current.setToken(token);\n\n    if (!data.current.needsReposSelected()) {\n      loadData();\n    }\n  }, [setState, loadData]);\n\n  const getAccessToken = React.useCallback((code: string) => {\n    fetch(`${ACCESS_TOKEN_HOST}/authenticate/${code}`)\n      .then(response => response.json())\n      .then(({ token }) => receiveToken(token));\n  }, [receiveToken])\n\n  const setView = React.useCallback((view: React.ComponentElement<any, any>) => {\n    setState(previous => ({...previous, view})); \n  }, [setState]);\n\n  React.useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      receiveToken(token);\n    } else if (query.code && typeof(query.code) === 'string') {\n      getAccessToken(query.code)\n    } else {\n      const redirect = encodeURIComponent(REDIRECT_URI + window.location.search);\n      window.location.replace(`https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}&scope=user,read,repo&redirect_uri=${redirect}`);\n    }\n  }, [receiveToken, getAccessToken]);\n\n  React.useEffect(() => {\n    if (state.phase === 'loading') {\n      if ((window.innerHeight + window.pageYOffset) >= document.body.offsetHeight - 30) {\n        window.scrollTo(0, document.body.offsetHeight)\n      }\n    }\n  }, [state, progress]);\n\n  if (state.phase === 'loading') {\n    return <pre>{progress}{'\\n...'}</pre>;\n  }\n\n  return <div className={classes.container}>\n    <CssBaseline />\n    <Typography variant=\"h1\">\n      GitHub Metrics\n    </Typography>\n    {data.current.repositories.map(({fullName}) => <Chip\n      className={classes.repoChip} \n      key={fullName}\n      label={fullName}\n      variant=\"outlined\"\n    />)}\n\n    {state.phase === 'loaded'\n      ? <Dashboard data={data.current} />\n      : state.phase === 'repo-select'\n        ? <RepoSelector data={data.current} />\n        : null\n    }\n  </div>;\n}\n\nexport default () => <ThemeProvider theme={theme}><App /></ThemeProvider>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}