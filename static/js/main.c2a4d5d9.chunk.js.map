{"version":3,"sources":["DataBucket.ts","DataClient.ts","workhours.ts","metrics.ts","segments.ts","queries.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataBucket","Object","classCallCheck","this","repositories","pullRequests","reviewRequests","reviews","query","queryString","parse","location","search","repoFilter","repo","cached","key","implementation","asyncToGenerator","regenerator_default","a","mark","_callee","cacheKey","result","wrap","_context","prev","next","concat","localStorage","getItem","JSON","console","log","length","abrupt","sent","setItem","stringify","stop","DataClient","token","discoverRepositories","org","formatRepo","fullName","full_name","id","_this","then","Error","discoverPullRequests","_callee2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","thisRepoPullRequests","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","pr","commits","_context2","undefined","Symbol","iterator","done","value","queryAllPages","state","number","push","opener","user","login","map","commit","date","committer","mergedAt","merged_at","createdAt","created_at","title","repoFullName","repoId","t0","return","finish","t1","error","t2","discoverReviewRequests","_callee3","results","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_loop","_iterator3","_step3","_context4","_context3","toConsumableArray","activities","filter","activity","event","prTitle","prId","requestedReviewer","requested_reviewer","requestedAt","t3","t4","apply","call","delegateYield","discoverReviews","_callee4","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_loop2","_iterator4","_step4","_context6","_context5","review","reviewer","reviewedAt","submitted_at","path","params","per_page","page","newPages","objectSpread","String","arguments","url","URL","keys","forEach","searchParams","append","fetch","toString","headers","Authorization","response","json","moment","extendMoment","baseMoment","workHours","start","hour","minute","second","end","workhours","range","total","_arr","Array","from","by","_i","day","_workHours$day$day","startMoment","clone","set","endMoment","rangeStart","max","rangeEnd","min","diff","duration","timeToReviewRequests","data","dataPoints","request","firstReviewAfterRequest","sort","unix","isAfter","timeToReview","asMilliseconds","err","mean","timeToMergePullRequests","timeToMerge","forRequestedReviewsRequestedBetween","_ref7","isBetween","targetReview","previousReview","isBefore","reverse","reviewRequestForReview","indexOf","_ref8","find","_ref9","_ref10","_ref11","forPullRequestsOpenedBetween","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","process","CLIENT_ID","REACT_APP_CLIENT_ID","REDIRECT_URI","REACT_APP_REDIRECT_URI","ACCESS_TOKEN_HOST","REACT_APP_ACCESS_TOKEN_HOST","App","loaded","receiveToken","setState","setToken","load","assertAuthenticated","code","getAccessToken","redirect","window","replace","_this2","_ref","_this3","formatHours","hours","numHours","Math","round","asHours","isNaN","react_default","createElement","className","props","classes","container","CssBaseline_default","Typography_default","variant","_ref2","Chip_default","label","Paper_default","main","gutterBottom","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","requested","_ref3","reviewers","_ref4","uniq","intersection","reviewersReviewed","reviewerData","targetReviewer","_ref5","_ref6","forRequestedReviewsReviewedBy","subtract","openerData","targetOpener","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","forMergedPullRequestsOpenedBy","Component","withStyles","theme","margin","spacing","unit","marginTop","padding","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2a4d5d9.chunk.js","sourcesContent":["import { Repository, PullRequest, ReviewRequest, Review } from \"./types\";\n\nexport class DataBucket {\n  public repositories: Repository[] = [];\n  public pullRequests: PullRequest[] = [];\n  public reviewRequests: ReviewRequest[] = [];\n  public reviews: Review[] = [];\n}\n","import queryString from 'query-string';\nimport { DataBucket } from \"./DataBucket\";\nimport { PullRequest } from \"./types\";\n\nconst query = queryString.parse(location.search);\n\nconst repoFilter = typeof(query.repo) === 'string' ? query.repo : null;\n\nconst cached = <T extends Array<any>>(key: string, implementation: () => Promise<T>) => async () => {\n  const cacheKey = `cache:${key}${repoFilter ? `?repo=${repoFilter}` : ''}`;\n  const cached = localStorage.getItem(cacheKey);\n  let result: T;\n\n  if (cached) {\n    result = JSON.parse(cached || '') || [];\n    console.log(`loaded ${key}: ${result.length}`);\n    return result;\n  } else {\n    result = await implementation();\n    localStorage.setItem(cacheKey, JSON.stringify(result));\n    console.log(`discovered ${key}: ${result.length}`);\n  }\n\n  return result;\n};\n\nexport default class DataClient extends DataBucket {\n  private token: string | undefined;\n\n  setToken(token: string) {\n    this.token = token;\n  }\n\n  async load() {\n    this.repositories = await this.discoverRepositories();\n    this.pullRequests = await this.discoverPullRequests();\n    this.reviewRequests = await this.discoverReviewRequests();\n    this.reviews = await this.discoverReviews();\n  }\n\n  discoverRepositories = cached('repositories', () => {\n    const orgFilter = query.org;\n    const repoFilter = query.repo;\n\n    const formatRepo = (repo: any) => ({\n      fullName: repo.full_name,\n      id: repo.id,\n    });\n\n    if (repoFilter) {\n      return  this.query(`/repos/${repoFilter}`).then(repo => ([formatRepo(repo)]));\n    } else {\n      throw new Error('please don\\'t make me load everything....');\n    }\n  });\n\n  discoverPullRequests = cached('pull-requests', async () => {\n    const pullRequests: PullRequest[] = [];\n\n    for(const repo of this.repositories) {\n      try {\n        const thisRepoPullRequests = await this.queryAllPages(`/repos/${repo.fullName}/pulls`, {state: 'all'});\n\n        for (const pr of thisRepoPullRequests) {\n\n          const commits = await this.queryAllPages(`/repos/${repo.fullName}/pulls/${pr.number}/commits`);\n\n          pullRequests.push({\n            opener: pr.user.login as string,\n            commits: commits.map(commit => ({\n              date: commit.commit.committer.date as string,\n            })),\n            mergedAt: pr.merged_at,\n            createdAt: pr.created_at,\n            title: pr.title,\n            repoFullName: repo.fullName,\n            repoId: repo.id,\n            id: pr.number,\n          });\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    return pullRequests;\n  });\n\n  discoverReviewRequests = cached('review-requests', async () => {\n    const results = [];\n\n    for (const pr of this.pullRequests) {\n      results.push(\n        ...await this.queryAllPages(`/repos/${pr.repoFullName}/issues/${pr.id}/events`).then(activities => activities\n          .filter((activity: any) => activity.event === 'review_requested')\n          .map((activity: any) => ({\n            prTitle: pr.title,\n            prId: pr.id,\n            requestedReviewer: activity.requested_reviewer.login,\n            requestedAt: activity.created_at,\n          })))\n      );\n    }\n\n    return results;\n  });\n\n  discoverReviews = cached('reviews', async () => {\n    const results = [];\n\n    for (const pr of this.pullRequests) {\n      results.push(\n        ...await this.queryAllPages(`/repos/${pr.repoFullName}/pulls/${pr.id}/reviews`).then(reviews => reviews\n          .map((review: any) => ({\n            prId: pr.id,\n            reviewer: review.user.login,\n            reviewedAt: review.submitted_at,\n            state: review.state,\n          })))\n      );\n    }\n\n    return results;\n  });\n\n  private async queryAllPages(path: string, params: {[key: string]: string} = {}) {\n    const results = [];\n    const per_page = 100;\n    let page = 1;\n    let newPages = [];\n\n    do  {\n      newPages = await this.query(path, {...params, page: String(page++), per_page: String(per_page)});\n      results.push(...newPages);\n    } while (newPages.length === per_page);\n\n    return results;\n  }\n\n  private query(path: string, params: {[key: string]: string} = {}) {\n    const url = new URL(`https://api.github.com${path}`);\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n\n    return fetch(url.toString(), {\n      headers: {\n        \"Authorization\": `token ${this.token}`\n      }\n    })\n      .then(response => response.json());\n  }\n}\n","import baseMoment from 'moment';\nimport { extendMoment, DateRange } from 'moment-range';\n\nconst moment = extendMoment(baseMoment as any);\n\nconst workHours = [\n  /* sunday */    {start: {hour: 0, minute: 0, second: 0}, end: {hour: 0, minute: 0, second: 0}},\n  /* monday */    {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* tuesday */   {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* wednesday */ {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* thursday */  {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* friday */    {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* saturday */  {start: {hour: 0, minute: 0, second: 0}, end: {hour: 0, minute: 0, second: 0}},\n];\n\nexport default (range: DateRange): baseMoment.Duration => {\n  let total: number = 0;\n\n  for (const day of Array.from(range.by('day'))) {\n    const {start, end} = workHours[day.day()];\n    const startMoment = day.clone().set(start);\n    const endMoment = day.clone().set(end);\n\n    const rangeStart = moment.max(startMoment, range.start);\n    const rangeEnd = moment.min(endMoment, range.end);\n\n    // this will be false if there are no work hours on that day\n    // or if the range start is after hours or the range end is before hours\n    if (rangeStart < rangeEnd) {\n      total += rangeEnd.diff(rangeStart);\n    }\n  }\n\n  return moment.duration(total);\n};\n","import {mean} from 'lodash/fp';\nimport { DataBucket } from \"./DataBucket\";\nimport workHours from './workhours';\nimport 'moment-range';\nimport { extendMoment } from 'moment-range';\nimport baseMoment from 'moment';\n\nconst moment = extendMoment(baseMoment as any);\n\nexport const timeToReviewRequests = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const request of data.reviewRequests) {\n    const reviews = data.reviews.filter(review => review.prId === request.prId);\n    const firstReviewAfterRequest = reviews\n      .sort((review: any) => moment(review.reviewedAt).unix())\n      .filter((review: any) => moment(review.reviewedAt).isAfter(request.requestedAt))\n      [0]\n    ;\n\n    if (firstReviewAfterRequest) {\n      const timeToReview = moment.range(moment(request.requestedAt), moment(firstReviewAfterRequest.reviewedAt));\n      dataPoints.push(workHours(timeToReview).asMilliseconds());\n    }\n  }\n\n  return moment.duration(mean(dataPoints));\n};\n\nexport const timeToMergePullRequests = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const pullRequests of data.pullRequests) {\n    if (!pullRequests.mergedAt) {\n      continue;\n    }\n    const timeToMerge = moment.range(moment(pullRequests.commits[0].date), moment(pullRequests.mergedAt));\n    dataPoints.push(workHours(timeToMerge).asMilliseconds());\n  }\n\n  return moment.duration(mean(dataPoints));\n};\n","import {intersection, uniq} from 'lodash/fp';\nimport moment, { Moment } from \"moment\";\nimport { DataBucket } from \"./DataBucket\";\nimport { reviewRequestForReview } from \"./queries\";\n\nexport const forRequestedReviewsReviewedBy = (data: DataBucket, targetReviewer: string): DataBucket => {\n  const result = new DataBucket();\n  result.reviewRequests = data.reviewRequests.filter(({requestedReviewer}) => requestedReviewer === targetReviewer);\n  result.reviews = data.reviews.filter(({reviewer}) => reviewer === targetReviewer);\n  result.pullRequests = data.pullRequests.filter(({id}) => !!result.reviews.find(({prId}) => prId === id));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n\n  return result;\n};\n\nexport const forRequestedReviewsRequestedBetween = (data: DataBucket, start: Moment, end: Moment): DataBucket => {\n  const result = new DataBucket();\n\n  result.reviewRequests = data.reviewRequests.filter(({requestedAt}) => moment(requestedAt).isBetween(start, end));\n  result.reviews = data.reviews.filter(review => {\n    const request = reviewRequestForReview(data, review);\n    return request && result.reviewRequests.indexOf(request) > -1\n  });\n  result.pullRequests = data.pullRequests.filter(({id}) => !!result.reviews.find(({prId}) => prId === id));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n\n  return result;\n};\n\nexport const forMergedPullRequestsOpenedBy = (data: DataBucket, targetOpener: string): DataBucket => {\n  const result = new DataBucket();\n\n  result.pullRequests = data.pullRequests.filter(({opener, mergedAt}) => !!mergedAt && opener === targetOpener);\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId}) => !!result.pullRequests.find(({id}) => prId === id));\n  result.reviewRequests = data.reviewRequests.filter(({prId}) => !!result.pullRequests.find(({id}) => prId === id));\n\n  return result;\n};\n\nexport const forPullRequestsOpenedBetween = (data: DataBucket, start: Moment, end: Moment): DataBucket => {\n  const result = new DataBucket();\n\n  result.pullRequests = data.pullRequests.filter(({createdAt}) => moment(createdAt).isBetween(start, end));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId}) => !!result.pullRequests.find(({id}) => prId === id));\n  result.reviewRequests = data.reviewRequests.filter(({prId}) => !!result.pullRequests.find(({id}) => prId === id));\n\n  return result;\n};\n","import { DataBucket } from \"./DataBucket\";\nimport {mean, intersection, uniq} from 'lodash/fp';\nimport moment, { Moment } from \"moment\";\nimport { Review, ReviewRequest } from \"./types\";\n\nexport const reviewRequestForReview = (data: DataBucket, targetReview: Review): ReviewRequest | undefined => {\n  const previousReview = data.reviews\n    .filter(review =>\n      review.prId === targetReview.prId\n      && review.reviewer === targetReview.reviewer\n      && moment(review.reviewedAt).isBefore(targetReview.reviewedAt)\n    )\n    .sort((review: any) => moment(review.reviewedAt).unix())\n    .reverse()\n    [0]\n  ;\n\n  return data.reviewRequests\n    .filter(request =>\n      request.prId === targetReview.prId\n      && request.requestedReviewer === targetReview.reviewer\n      && moment(request.requestedAt).isBefore(targetReview.reviewedAt)\n      && (!previousReview || moment(request.requestedAt).isAfter(previousReview.reviewedAt))\n    )\n    .sort((review: any) => moment(review.reviewedAt).unix())\n    .reverse()\n    [0];\n};\n\nexport const mergedPullRequestOpeners = (data: DataBucket) =>\n  uniq(data.pullRequests\n    .filter(({mergedAt}) => !!mergedAt)\n    .map(({opener}) => opener)\n  )\n;\n\nexport const reviewersReviewed = (data: DataBucket) => {\n  const requested = data.reviewRequests.map(({requestedReviewer}) => requestedReviewer);\n  const reviewers = data.reviews.map(({reviewer}) => reviewer);\n\n  return uniq(intersection(\n    requested,\n    reviewers\n  ));\n};\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport DataClient from \"./DataClient\";\nimport queryString from 'query-string';\nimport { timeToReviewRequests, timeToMergePullRequests } from \"./metrics\";\nimport { reviewersReviewed, mergedPullRequestOpeners } from \"./queries\";\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { withStyles } from '@material-ui/core/styles';\nimport { forRequestedReviewsReviewedBy, forRequestedReviewsRequestedBetween, forMergedPullRequestsOpenedBy, forPullRequestsOpenedBetween } from \"./segments\";\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\n\nconst query = queryString.parse(location.search);\n\nconst {\n  REACT_APP_CLIENT_ID: CLIENT_ID,\n  REACT_APP_REDIRECT_URI: REDIRECT_URI,\n  REACT_APP_ACCESS_TOKEN_HOST: ACCESS_TOKEN_HOST\n} = process.env;\n\nconst styles = (theme: Theme) => ({\n  container: {\n    margin: theme.spacing.unit * 2,\n  },\n  main: {\n    marginTop: theme.spacing.unit * 4,\n    padding: theme.spacing.unit * 4,\n  },\n});\n\ntype State = {token?: string, loaded: boolean};\ntype Props = {classes: {[key: string]: string}};\nclass App extends Component<Props, State> {\n  state: State = {loaded: false};\n  private data: DataClient = new DataClient();\n\n  componentDidMount() {\n    this.assertAuthenticated();\n  }\n\n  assertAuthenticated() {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      this.receiveToken(token);\n    } else if (query.code && typeof(query.code) === 'string') {\n      this.getAccessToken(query.code)\n    } else {\n      const redirect = REDIRECT_URI + window.location.search;\n      window.location.replace(`https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}&scope=user,repo&redirect_uri=${redirect}`);\n    }\n  }\n\n  private getAccessToken(code: string) {\n    fetch(`${ACCESS_TOKEN_HOST}/authenticate/${code}`)\n      .then(response => response.json())\n      .then(({ token }) => this.receiveToken(token));\n  }\n\n  private receiveToken = (token: string) => {\n    localStorage.setItem('token', token);\n    this.setState({token});\n\n    this.data.setToken(token);\n    this.data.load().then(() => this.setState({loaded: true}));\n  };\n\n  render() {\n    if (this.state.loaded === false) {\n      return null;\n    }\n\n    const formatHours = (hours: moment.Duration) => {\n      const numHours = Math.round(hours.asHours());\n      return isNaN(numHours) || numHours === 0\n        ? null\n        : `${numHours} hour${numHours > 1 ? 's' : ''}`;\n    };\n\n    return <div className={this.props.classes.container}>\n      <CssBaseline />\n      <Typography variant=\"h1\">\n        GitHub Metrics\n      </Typography>\n      {this.data.repositories.map(({fullName}) => <Chip\n        key={fullName}\n        label={fullName}\n        variant=\"outlined\"\n      />)}\n\n      <Paper className={this.props.classes.main}>\n        <Typography variant=\"h3\" gutterBottom>\n          time to respond to review requests\n        </Typography>\n        <Typography variant=\"caption\" gutterBottom>\n          when a review is requested from somebody, how long does it take them to respond?\n          this metric only counts time during work hours monday through friday.\n        </Typography>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>past 30 days</TableCell>\n              <TableCell>30 - 60 days</TableCell>\n              <TableCell>60 - 90 days</TableCell>\n              <TableCell>all time</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {reviewersReviewed(this.data).map(reviewer => {\n              const reviewerData = forRequestedReviewsReviewedBy(this.data, reviewer);\n              return <TableRow key={reviewer}>\n                <TableCell>{reviewer}</TableCell>\n                <TableCell>{formatHours(timeToReviewRequests(\n                  forRequestedReviewsRequestedBetween(reviewerData, moment().subtract(30, 'days'), moment())\n                ))}</TableCell>\n                <TableCell>{formatHours(timeToReviewRequests(\n                  forRequestedReviewsRequestedBetween(reviewerData, moment().subtract(60, 'days'), moment().subtract(30, 'days'))\n                ))}</TableCell>\n                <TableCell>{formatHours(timeToReviewRequests(\n                  forRequestedReviewsRequestedBetween(reviewerData, moment().subtract(90, 'days'), moment().subtract(60, 'days'))\n                ))}</TableCell>\n                <TableCell>{formatHours(timeToReviewRequests(reviewerData))}</TableCell>\n              </TableRow>;\n            })}\n          </TableBody>\n        </Table>\n      </Paper>\n      <Paper className={this.props.classes.main}>\n        <Typography variant=\"h3\" gutterBottom>\n          time to merge pull requests \n        </Typography>\n        <Typography variant=\"caption\" gutterBottom>\n          when somebody opens a pull request, how long is it between the first commit on the pull request and when it is merged?\n          this metric only counts time during work hours monday through friday.\n        </Typography>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>past 30 days</TableCell>\n              <TableCell>30 - 60 days</TableCell>\n              <TableCell>60 - 90 days</TableCell>\n              <TableCell>all time</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {mergedPullRequestOpeners(this.data).map(opener => {\n              const openerData = forMergedPullRequestsOpenedBy(this.data, opener);\n              return <TableRow key={opener}>\n                <TableCell>{opener}</TableCell>\n                <TableCell>{formatHours(timeToMergePullRequests(\n                  forPullRequestsOpenedBetween(openerData, moment().subtract(30, 'days'), moment())\n                ))}</TableCell>\n                <TableCell>{formatHours(timeToMergePullRequests(\n                  forPullRequestsOpenedBetween(openerData, moment().subtract(60, 'days'), moment().subtract(30, 'days'))\n                ))}</TableCell>\n                <TableCell>{formatHours(timeToMergePullRequests(\n                  forPullRequestsOpenedBetween(openerData, moment().subtract(90, 'days'), moment().subtract(60, 'days'))\n                ))}</TableCell>\n                <TableCell>{formatHours(timeToMergePullRequests(openerData))}</TableCell>\n              </TableRow>;\n            })}\n          </TableBody>\n        </Table>\n      </Paper>\n    </div>;\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}