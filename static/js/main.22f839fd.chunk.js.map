{"version":3,"sources":["DataBucket.ts","DataClient.ts","segments.ts","queries.ts","timeUtils.ts","workhours.ts","metrics.ts","components/PullRequestList.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataBucket","Object","classCallCheck","this","repositories","pullRequests","reviewRequests","reviews","query","queryString","parse","location","search","repoFilter","repo","cached","key","implementation","asyncToGenerator","regenerator_default","a","mark","_callee","cacheKey","result","wrap","_context","prev","next","concat","localStorage","getItem","JSON","console","log","length","abrupt","sent","setItem","stringify","stop","DataClient","token","discoverRepositories","org","formatRepo","fullName","full_name","id","_this","then","Error","discoverPullRequests","_callee2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","thisRepoPullRequests","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","pr","commits","_context2","undefined","Symbol","iterator","done","value","queryAllPages","state","number","push","opener","user","login","map","commit","date","committer","mergedAt","merged_at","createdAt","created_at","title","repoFullName","repoId","t0","return","finish","t1","error","t2","discoverReviewRequests","_callee3","results","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_loop","_iterator3","_step3","_context4","_context3","toConsumableArray","activities","filter","activity","event","requested_reviewer","prTitle","prId","requestedReviewer","requestedAt","t3","t4","apply","call","delegateYield","discoverReviews","_callee4","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_loop2","_iterator4","_step4","_context6","_context5","review","reviewer","reviewedAt","submitted_at","path","params","per_page","page","newPages","objectSpread","String","arguments","url","URL","keys","forEach","searchParams","append","fetch","toString","headers","Authorization","response","json","forRequestedReviewsRequestedBetween","data","start","end","_ref7","moment","isBetween","request","targetReview","previousReview","isBefore","sort","unix","reverse","isAfter","reviewRequestForReview","indexOf","_ref8","find","_ref9","_ref10","_ref11","forPullRequestsOpenedBetween","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","formatHours","hours","numHours","Math","round","asHours","isNaN","extendMoment","baseMoment","workHours","hour","minute","second","workhours","range","total","_arr","Array","from","by","_i","day","_workHours$day$day","startMoment","clone","set","endMoment","rangeStart","max","rangeEnd","min","diff","duration","timeToReviewRequests","dataPoints","firstReviewAfterRequest","timeToReview","asMilliseconds","err","mean","timeToMergePullRequests","timeToMerge","withStyles","theme","main","marginTop","spacing","unit","padding","_ref","classes","react_default","createElement","Paper_default","className","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","timeToMergePullRequest","setView","Fragment","Typography_default","variant","gutterBottom","requested","_ref3","reviewers","_ref4","uniq","intersection","reviewersReviewed","reviewerData","targetReviewer","_ref2","_ref5","_ref6","forRequestedReviewsReviewedBy","subtract","segment","href","onClick","e","preventDefault","components_PullRequestList","mergedPullRequestOpeners","openerData","targetOpener","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","forMergedPullRequestsOpenedBy","process","CLIENT_ID","REACT_APP_CLIENT_ID","REDIRECT_URI","REACT_APP_REDIRECT_URI","ACCESS_TOKEN_HOST","REACT_APP_ACCESS_TOKEN_HOST","App","loaded","receiveToken","setState","setToken","load","view","assertAuthenticated","code","getAccessToken","redirect","window","replace","_this2","props","container","CssBaseline_default","Chip_default","label","components_Dashboard","Component","margin","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22f839fd.chunk.js","sourcesContent":["import { Repository, PullRequest, ReviewRequest, Review } from \"./types\";\n\nexport class DataBucket {\n  public repositories: Repository[] = [];\n  public pullRequests: PullRequest[] = [];\n  public reviewRequests: ReviewRequest[] = [];\n  public reviews: Review[] = [];\n}\n","import queryString from 'query-string';\nimport { DataBucket } from \"./DataBucket\";\nimport { PullRequest } from \"./types\";\n\nconst query = queryString.parse(location.search);\n\nconst repoFilter = typeof(query.repo) === 'string' ? query.repo : null;\n\nconst cached = <T extends Array<any>>(key: string, implementation: () => Promise<T>) => async () => {\n  const cacheKey = `cache:${key}${repoFilter ? `?repo=${repoFilter}` : ''}`;\n  const cached = localStorage.getItem(cacheKey);\n  let result: T;\n\n  if (cached) {\n    result = JSON.parse(cached || '') || [];\n    console.log(`loaded ${key}: ${result.length}`);\n    return result;\n  } else {\n    result = await implementation();\n    localStorage.setItem(cacheKey, JSON.stringify(result));\n    console.log(`discovered ${key}: ${result.length}`);\n  }\n\n  return result;\n};\n\nexport default class DataClient extends DataBucket {\n  private token: string | undefined;\n\n  setToken(token: string) {\n    this.token = token;\n  }\n\n  async load() {\n    this.repositories = await this.discoverRepositories();\n    this.pullRequests = await this.discoverPullRequests();\n    this.reviewRequests = await this.discoverReviewRequests();\n    this.reviews = await this.discoverReviews();\n  }\n\n  discoverRepositories = cached('repositories', () => {\n    const orgFilter = query.org;\n    const repoFilter = query.repo;\n\n    const formatRepo = (repo: any) => ({\n      fullName: repo.full_name,\n      id: repo.id,\n    });\n\n    if (repoFilter) {\n      return  this.query(`/repos/${repoFilter}`).then(repo => ([formatRepo(repo)]));\n    } else {\n      throw new Error('please don\\'t make me load everything....');\n    }\n  });\n\n  discoverPullRequests = cached('pull-requests', async () => {\n    const pullRequests: PullRequest[] = [];\n\n    for(const repo of this.repositories) {\n      try {\n        const thisRepoPullRequests = await this.queryAllPages(`/repos/${repo.fullName}/pulls`, {state: 'all'});\n\n        for (const pr of thisRepoPullRequests) {\n\n          const commits = await this.queryAllPages(`/repos/${repo.fullName}/pulls/${pr.number}/commits`);\n\n          pullRequests.push({\n            opener: pr.user.login as string,\n            commits: commits.map(commit => ({\n              date: commit.commit.committer.date as string,\n            })),\n            mergedAt: pr.merged_at,\n            createdAt: pr.created_at,\n            title: pr.title,\n            repoFullName: repo.fullName,\n            repoId: repo.id,\n            id: pr.number,\n          });\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    return pullRequests;\n  });\n\n  discoverReviewRequests = cached('review-requests', async () => {\n    const results = [];\n\n    for (const pr of this.pullRequests) {\n      results.push(\n        ...await this.queryAllPages(`/repos/${pr.repoFullName}/issues/${pr.id}/events`).then(activities => activities\n          .filter((activity: any) => activity.event === 'review_requested' && activity.requested_reviewer)\n          .map((activity: any) => ({\n            prTitle: pr.title,\n            prId: pr.id,\n            requestedReviewer: activity.requested_reviewer.login,\n            requestedAt: activity.created_at,\n          })))\n      );\n    }\n\n    return results;\n  });\n\n  discoverReviews = cached('reviews', async () => {\n    const results = [];\n\n    for (const pr of this.pullRequests) {\n      results.push(\n        ...await this.queryAllPages(`/repos/${pr.repoFullName}/pulls/${pr.id}/reviews`).then(reviews => reviews\n          .map((review: any) => ({\n            prId: pr.id,\n            reviewer: review.user.login,\n            reviewedAt: review.submitted_at,\n            state: review.state,\n          })))\n      );\n    }\n\n    return results;\n  });\n\n  private async queryAllPages(path: string, params: {[key: string]: string} = {}) {\n    const results = [];\n    const per_page = 100;\n    let page = 1;\n    let newPages = [];\n\n    do  {\n      newPages = await this.query(path, {...params, page: String(page++), per_page: String(per_page)});\n      results.push(...newPages);\n    } while (newPages.length === per_page);\n\n    return results;\n  }\n\n  private query(path: string, params: {[key: string]: string} = {}) {\n    const url = new URL(`https://api.github.com${path}`);\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n\n    return fetch(url.toString(), {\n      headers: {\n        \"Authorization\": `token ${this.token}`\n      }\n    })\n      .then(response => response.json());\n  }\n}\n","import {intersection, uniq} from 'lodash/fp';\nimport moment, { Moment } from \"moment\";\nimport { DataBucket } from \"./DataBucket\";\nimport { reviewRequestForReview } from \"./queries\";\n\nexport const forRequestedReviewsReviewedBy = (data: DataBucket, targetReviewer: string): DataBucket => {\n  const result = new DataBucket();\n  result.reviewRequests = data.reviewRequests.filter(({requestedReviewer}) => requestedReviewer === targetReviewer);\n  result.reviews = data.reviews.filter(({reviewer}) => reviewer === targetReviewer);\n  result.pullRequests = data.pullRequests.filter(({id}) => !!result.reviews.find(({prId}) => prId === id));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n\n  return result;\n};\n\nexport const forRequestedReviewsRequestedBetween = (data: DataBucket, start: Moment, end: Moment): DataBucket => {\n  const result = new DataBucket();\n\n  result.reviewRequests = data.reviewRequests.filter(({requestedAt}) => moment(requestedAt).isBetween(start, end));\n  result.reviews = data.reviews.filter(review => {\n    const request = reviewRequestForReview(data, review);\n    return request && result.reviewRequests.indexOf(request) > -1\n  });\n  result.pullRequests = data.pullRequests.filter(({id}) => !!result.reviews.find(({prId}) => prId === id));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n\n  return result;\n};\n\nexport const forMergedPullRequestsOpenedBy = (data: DataBucket, targetOpener: string): DataBucket => {\n  const result = new DataBucket();\n\n  result.pullRequests = data.pullRequests.filter(({opener, mergedAt}) => !!mergedAt && opener === targetOpener);\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId}) => !!result.pullRequests.find(({id}) => prId === id));\n  result.reviewRequests = data.reviewRequests.filter(({prId}) => !!result.pullRequests.find(({id}) => prId === id));\n\n  return result;\n};\n\nexport const forPullRequestsOpenedBetween = (data: DataBucket, start: Moment, end: Moment): DataBucket => {\n  const result = new DataBucket();\n\n  result.pullRequests = data.pullRequests.filter(({createdAt}) => moment(createdAt).isBetween(start, end));\n  result.repositories = data.repositories.filter(({id}) => !!result.pullRequests.find(({repoId}) => repoId === id));\n  result.reviews = data.reviews.filter(({prId}) => !!result.pullRequests.find(({id}) => prId === id));\n  result.reviewRequests = data.reviewRequests.filter(({prId}) => !!result.pullRequests.find(({id}) => prId === id));\n\n  return result;\n};\n","import { DataBucket } from \"./DataBucket\";\nimport {mean, intersection, uniq} from 'lodash/fp';\nimport moment, { Moment } from \"moment\";\nimport { Review, ReviewRequest } from \"./types\";\n\nexport const reviewRequestForReview = (data: DataBucket, targetReview: Review): ReviewRequest | undefined => {\n  const previousReview = data.reviews\n    .filter(review =>\n      review.prId === targetReview.prId\n      && review.reviewer === targetReview.reviewer\n      && moment(review.reviewedAt).isBefore(targetReview.reviewedAt)\n    )\n    .sort((review: any) => moment(review.reviewedAt).unix())\n    .reverse()\n    [0]\n  ;\n\n  return data.reviewRequests\n    .filter(request =>\n      request.prId === targetReview.prId\n      && request.requestedReviewer === targetReview.reviewer\n      && moment(request.requestedAt).isBefore(targetReview.reviewedAt)\n      && (!previousReview || moment(request.requestedAt).isAfter(previousReview.reviewedAt))\n    )\n    .sort((review: any) => moment(review.reviewedAt).unix())\n    .reverse()\n    [0];\n};\n\nexport const mergedPullRequestOpeners = (data: DataBucket) =>\n  uniq(data.pullRequests\n    .filter(({mergedAt}) => !!mergedAt)\n    .map(({opener}) => opener)\n  )\n;\n\nexport const reviewersReviewed = (data: DataBucket) => {\n  const requested = data.reviewRequests.map(({requestedReviewer}) => requestedReviewer);\n  const reviewers = data.reviews.map(({reviewer}) => reviewer);\n\n  return uniq(intersection(\n    requested,\n    reviewers\n  ));\n};\n","import moment from 'moment';\n\nexport const formatHours = (hours: moment.Duration) => {\n  const numHours = Math.round(hours.asHours());\n  return isNaN(numHours) || numHours === 0\n    ? null\n    : numHours >= 8\n      ? `${numHours/8} day${numHours === 8 ? '' : 's'}`\n      : `${numHours} hour${numHours > 1 ? 's' : ''}`;\n};\n","import baseMoment from 'moment';\nimport { extendMoment, DateRange } from 'moment-range';\n\nconst moment = extendMoment(baseMoment as any);\n\nconst workHours = [\n  /* sunday */    {start: {hour: 0, minute: 0, second: 0}, end: {hour: 0, minute: 0, second: 0}},\n  /* monday */    {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* tuesday */   {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* wednesday */ {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* thursday */  {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* friday */    {start: {hour: 9, minute: 0, second: 0}, end: {hour: 17, minute: 0, second: 0}},\n  /* saturday */  {start: {hour: 0, minute: 0, second: 0}, end: {hour: 0, minute: 0, second: 0}},\n];\n\nexport default (range: DateRange): baseMoment.Duration => {\n  let total: number = 0;\n\n  for (const day of Array.from(range.by('day'))) {\n    const {start, end} = workHours[day.day()];\n    const startMoment = day.clone().set(start);\n    const endMoment = day.clone().set(end);\n\n    const rangeStart = moment.max(startMoment, range.start);\n    const rangeEnd = moment.min(endMoment, range.end);\n\n    // this will be false if there are no work hours on that day\n    // or if the range start is after hours or the range end is before hours\n    if (rangeStart < rangeEnd) {\n      total += rangeEnd.diff(rangeStart);\n    }\n  }\n\n  return moment.duration(total);\n};\n","import {mean} from 'lodash/fp';\nimport { DataBucket } from \"./DataBucket\";\nimport workHours from './workhours';\nimport 'moment-range';\nimport { extendMoment } from 'moment-range';\nimport baseMoment from 'moment';\nimport { PullRequest } from \"./types\";\n\nconst moment = extendMoment(baseMoment as any);\n\nexport const timeToReviewRequests = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const request of data.reviewRequests) {\n    const reviews = data.reviews.filter(review => review.prId === request.prId);\n    const firstReviewAfterRequest = reviews\n      .sort((review: any) => moment(review.reviewedAt).unix())\n      .filter((review: any) => moment(review.reviewedAt).isAfter(request.requestedAt))\n      [0]\n    ;\n\n    if (firstReviewAfterRequest) {\n      const timeToReview = moment.range(moment(request.requestedAt), moment(firstReviewAfterRequest.reviewedAt));\n      dataPoints.push(workHours(timeToReview).asMilliseconds());\n    }\n  }\n\n  return moment.duration(mean(dataPoints));\n};\n\nexport const timeToMergePullRequest = (pr: PullRequest) => {\n  const timeToMerge = moment.range(moment(pr.commits[0].date), moment(pr.mergedAt));\n  return moment.duration(workHours(timeToMerge).asMilliseconds());\n};\n\nexport const timeToMergePullRequests = (data: DataBucket) => {\n  const dataPoints: number[] = [];\n\n  for(const pullRequests of data.pullRequests) {\n    if (!pullRequests.mergedAt) {\n      continue;\n    }\n    const timeToMerge = moment.range(moment(pullRequests.commits[0].date), moment(pullRequests.mergedAt));\n    dataPoints.push(workHours(timeToMerge).asMilliseconds());\n  }\n\n  return moment.duration(mean(dataPoints));\n};\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport { DataBucket } from \"../DataBucket\";\nimport { timeToMergePullRequest } from \"../metrics\";\nimport { formatHours } from \"../timeUtils\";\n\ntype Props = {\n  classes: {[key: string]: string};\n  data: DataBucket;\n};\n\nconst PullRequestList: React.FC<Props> = ({classes, data}) => <Paper className={classes.main}>\n  <Table>\n    <TableHead>\n      <TableRow>\n        <TableCell>title</TableCell>\n        <TableCell>time to merge</TableCell>\n        <TableCell>created</TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {data.pullRequests.map(pr => <TableRow key={pr.id}>\n        <TableCell>{pr.title}</TableCell>\n        <TableCell>{formatHours(timeToMergePullRequest(pr))}</TableCell>\n        <TableCell>{pr.createdAt}</TableCell>\n      </TableRow>)}\n    </TableBody>\n  </Table>\n</Paper>;\n\nconst styles = (theme: Theme) => ({\n  main: {\n    marginTop: theme.spacing.unit * 4,\n    padding: theme.spacing.unit * 4,\n  },\n});\n\nexport default withStyles(styles)(PullRequestList);\n","import Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\nimport moment from 'moment';\nimport Typography from \"@material-ui/core/Typography\";\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { forMergedPullRequestsOpenedBy, forPullRequestsOpenedBetween, forRequestedReviewsReviewedBy, forRequestedReviewsRequestedBetween } from \"../segments\";\nimport { formatHours } from \"../timeUtils\";\nimport { DataBucket } from \"../DataBucket\";\nimport { mergedPullRequestOpeners, reviewersReviewed } from \"../queries\";\nimport { timeToMergePullRequests, timeToReviewRequests } from \"../metrics\";\nimport PullRequestList from './PullRequestList';\n\ntype Props = {\n  classes: {[key: string]: string};\n  setView: (view: React.ComponentElement<any, any>) => void;\n  data: DataBucket;\n};\n\nconst Dashboard: React.FC<Props> = ({classes, data, setView}) => <React.Fragment>\n  <Paper className={classes.main}>\n    <Typography variant=\"h3\" gutterBottom>\n      time to respond to review requests\n    </Typography>\n    <Typography variant=\"caption\" gutterBottom>\n      when a review is requested from somebody, how long does it take them to respond?\n      this metric only counts time during work hours monday through friday.\n    </Typography>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell></TableCell>\n          <TableCell>past 30 days</TableCell>\n          <TableCell>30 - 60 days</TableCell>\n          <TableCell>60 - 90 days</TableCell>\n          <TableCell>all time</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {reviewersReviewed(data).map(reviewer => {\n          const reviewerData = forRequestedReviewsReviewedBy(data, reviewer);\n          return <TableRow key={reviewer}>\n            <TableCell>{reviewer}</TableCell>\n            <TableCell>{formatHours(timeToReviewRequests(\n              forRequestedReviewsRequestedBetween(reviewerData, moment().subtract(30, 'days'), moment())\n            ))}</TableCell>\n            <TableCell>{formatHours(timeToReviewRequests(\n              forRequestedReviewsRequestedBetween(reviewerData, moment().subtract(60, 'days'), moment().subtract(30, 'days'))\n            ))}</TableCell>\n            <TableCell>{formatHours(timeToReviewRequests(\n              forRequestedReviewsRequestedBetween(reviewerData, moment().subtract(90, 'days'), moment().subtract(60, 'days'))\n            ))}</TableCell>\n            <TableCell>{formatHours(timeToReviewRequests(reviewerData))}</TableCell>\n          </TableRow>;\n        })}\n      </TableBody>\n    </Table>\n  </Paper>\n  <Paper className={classes.main}>\n    <Typography variant=\"h3\" gutterBottom>\n      time to merge pull requests\n    </Typography>\n    <Typography variant=\"caption\" gutterBottom>\n      when somebody opens a pull request, how long is it between the first commit on the pull request and when it is merged?\n      this metric only counts time during work hours monday through friday.\n    </Typography>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell></TableCell>\n          <TableCell>past 30 days</TableCell>\n          <TableCell>30 - 60 days</TableCell>\n          <TableCell>60 - 90 days</TableCell>\n          <TableCell>all time</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <TableCell></TableCell>\n          <TableCell>{(() => {\n            const segment = forPullRequestsOpenedBetween(data, moment().subtract(30, 'days'), moment());\n            return <a href=\"\" onClick={(e) => { \n              e.preventDefault();\n              setView(<PullRequestList data={segment} />); \n            }}>{formatHours(timeToMergePullRequests(segment))}</a>;\n          })()}</TableCell>\n          <TableCell>{formatHours(timeToMergePullRequests(\n            forPullRequestsOpenedBetween(data, moment().subtract(60, 'days'), moment().subtract(30, 'days'))\n          ))}</TableCell>\n          <TableCell>{formatHours(timeToMergePullRequests(\n            forPullRequestsOpenedBetween(data, moment().subtract(90, 'days'), moment().subtract(60, 'days'))\n          ))}</TableCell>\n          <TableCell>{formatHours(timeToMergePullRequests(data))}</TableCell>\n        </TableRow>\n        {mergedPullRequestOpeners(data).map(opener => {\n          const openerData = forMergedPullRequestsOpenedBy(data, opener);\n          return <TableRow key={opener}>\n            <TableCell><a href=\"\" onClick={e => {\n              e.preventDefault();\n              setView(<PullRequestList data={openerData} />); \n            }}>{opener}</a></TableCell>\n            <TableCell>{(() => {\n              const segment = forPullRequestsOpenedBetween(openerData, moment().subtract(30, 'days'), moment());\n              return <a href=\"\" onClick={(e) => { \n                e.preventDefault();\n                setView(<PullRequestList data={segment} />); \n              }}>{formatHours(timeToMergePullRequests(segment))}</a>;\n            })()}</TableCell>\n            <TableCell>{formatHours(timeToMergePullRequests(\n              forPullRequestsOpenedBetween(openerData, moment().subtract(60, 'days'), moment().subtract(30, 'days'))\n            ))}</TableCell>\n            <TableCell>{formatHours(timeToMergePullRequests(\n              forPullRequestsOpenedBetween(openerData, moment().subtract(90, 'days'), moment().subtract(60, 'days'))\n            ))}</TableCell>\n            <TableCell>{formatHours(timeToMergePullRequests(openerData))}</TableCell>\n          </TableRow>;\n        })}\n      </TableBody>\n    </Table>\n  </Paper>\n</React.Fragment>;\n\nconst styles = (theme: Theme) => ({\n  main: {\n    marginTop: theme.spacing.unit * 4,\n    padding: theme.spacing.unit * 4,\n  },\n});\n\nexport default withStyles(styles)(Dashboard);\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport DataClient from \"./DataClient\";\nimport queryString from 'query-string';\nimport { timeToReviewRequests, timeToMergePullRequests } from \"./metrics\";\nimport { reviewersReviewed, mergedPullRequestOpeners } from \"./queries\";\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { withStyles } from '@material-ui/core/styles';\nimport { forRequestedReviewsReviewedBy, forRequestedReviewsRequestedBetween, forMergedPullRequestsOpenedBy, forPullRequestsOpenedBetween } from \"./segments\";\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\nimport Dashboard from './components/Dashboard';\n\nconst query = queryString.parse(location.search);\n\nconst {\n  REACT_APP_CLIENT_ID: CLIENT_ID,\n  REACT_APP_REDIRECT_URI: REDIRECT_URI,\n  REACT_APP_ACCESS_TOKEN_HOST: ACCESS_TOKEN_HOST\n} = process.env;\n\nconst styles = (theme: Theme) => ({\n  container: {\n    margin: theme.spacing.unit * 2,\n  },\n  main: {\n    marginTop: theme.spacing.unit * 4,\n    padding: theme.spacing.unit * 4,\n  },\n});\n\ntype State = {\n  token?: string,\n  loaded: boolean,\n  view?: React.ComponentElement<any, any>\n};\ntype Props = {classes: {[key: string]: string}};\nclass App extends Component<Props, State> {\n  state: State = {\n    loaded: false,\n  };\n  private data: DataClient = new DataClient();\n\n  componentDidMount() {\n    this.assertAuthenticated();\n  }\n\n  assertAuthenticated() {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      this.receiveToken(token);\n    } else if (query.code && typeof(query.code) === 'string') {\n      this.getAccessToken(query.code)\n    } else {\n      const redirect = REDIRECT_URI + window.location.search;\n      window.location.replace(`https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}&scope=user,repo&redirect_uri=${redirect}`);\n    }\n  }\n\n  private getAccessToken(code: string) {\n    fetch(`${ACCESS_TOKEN_HOST}/authenticate/${code}`)\n      .then(response => response.json())\n      .then(({ token }) => this.receiveToken(token));\n  }\n\n  private receiveToken = (token: string) => {\n    localStorage.setItem('token', token);\n    this.setState({token});\n\n    this.data.setToken(token);\n    this.data.load().then(() => this.setState({loaded: true}));\n  };\n\n  setView = (view: React.ComponentElement<any, any>) => {\n    this.setState({view});\n  };\n\n  render() {\n    if (this.state.loaded === false) {\n      return null;\n    }\n\n    return <div className={this.props.classes.container}>\n      <CssBaseline />\n      <Typography variant=\"h1\">\n        GitHub Metrics\n      </Typography>\n      {this.data.repositories.map(({fullName}) => <Chip\n        key={fullName}\n        label={fullName}\n        variant=\"outlined\"\n      />)}\n\n      {this.state.view ? this.state.view : <Dashboard data={this.data} setView={this.setView} />}\n    </div>;\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}